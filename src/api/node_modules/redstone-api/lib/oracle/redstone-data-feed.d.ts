import { SourceConfig } from "./fetchers/Fetcher";
export declare type ValueSelectionAlgorithm = "first-valid" | "newest-valid" | "oldest-valid";
export declare type SourceType = "cache-layer" | "streamr" | "streamr-storage";
export interface PriceDataType {
    symbols: string[];
    values: number[];
    timestamp: number;
}
export interface SignedPriceDataType {
    priceData: PriceDataType;
    signature: string;
    liteSignature: string;
}
export interface DataSourcesConfig {
    valueSelectionAlgorithm: ValueSelectionAlgorithm;
    timeoutMilliseconds: number;
    maxTimestampDiffMilliseconds: number;
    preVerifySignatureOffchain: boolean;
    sources: SourceConfig[];
}
export interface DataFeedOptions {
    dataSources?: DataSourcesConfig;
    asset?: string;
}
export declare type DataFeedId = "redstone" | "redstone-stocks" | "redstone-rapid" | "redstone-avalanche" | "redstone-avalanche-prod";
export declare class RedstoneDataFeed {
    private dataFeedOptions;
    private fetchers;
    constructor(dataFeedOptions?: DataFeedOptions);
    getSignedPrice(): Promise<SignedPriceDataType>;
    private fetchFirstValid;
    private fetchAllAndSelectValid;
}
