"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertResponseToPricePackage = exports.validateDataPackage = exports.selectDataPackage = void 0;
var EvmPriceSigner_1 = __importDefault(require("redstone-node/dist/src/signers/EvmPriceSigner"));
var lodash_1 = __importDefault(require("lodash"));
var priceSigner = new EvmPriceSigner_1.default();
function selectDataPackage(packages, valueSelectionAlgorithm) {
    var sortedPackages = __spreadArray([], packages);
    sortedPackages.sort(function (p1, p2) { return p1.timestamp - p2.timestamp; }); // sorting prices from oldest to newest
    switch (valueSelectionAlgorithm) {
        // We don't handle first-valid here, because it works in a completely different way
        // than other value selection algorithms and it doesn't use this function
        case "newest-valid":
            return packages[packages.length - 1];
        case "oldest-valid":
            return packages[0];
        default:
            throw new Error("Unsupported value for valueSelectionAlgorithm: " + valueSelectionAlgorithm);
    }
}
exports.selectDataPackage = selectDataPackage;
function validateDataPackage(fetchedPackage, dataFeedOptions, signer) {
    var _a, _b;
    var maxTimestampDiffMilliseconds = (_a = dataFeedOptions.dataSources) === null || _a === void 0 ? void 0 : _a.maxTimestampDiffMilliseconds;
    var preVerifySignatureOffchain = (_b = dataFeedOptions.dataSources) === null || _b === void 0 ? void 0 : _b.preVerifySignatureOffchain;
    // Checking timestamp diff
    var timeDiffMilliseconds = Date.now() - fetchedPackage.timestamp;
    // Checking timestamp diff
    if (maxTimestampDiffMilliseconds && maxTimestampDiffMilliseconds < timeDiffMilliseconds) {
        console.warn("Timestamp is too old: " + fetchedPackage.timestamp);
        return false;
    }
    // Offchain signature verification
    // (only liteSignature offchain verification is implemented for now)
    if (preVerifySignatureOffchain) {
        var isValidSignature = priceSigner.verifyLiteSignature({
            pricePackage: {
                prices: fetchedPackage.prices,
                timestamp: fetchedPackage.timestamp,
            },
            signer: signer,
            signature: fetchedPackage.signature,
            liteSignature: fetchedPackage.liteSignature,
        });
        if (!isValidSignature) {
            console.warn("Signature is invalid: " + fetchedPackage.liteSignature);
            return false;
        }
    }
    return true;
}
exports.validateDataPackage = validateDataPackage;
function convertResponseToPricePackage(data) {
    var pricePackage = lodash_1.default.pick(data, ["prices", "timestamp"]);
    var serialized = priceSigner.serializeToMessage(pricePackage);
    var priceData = serialized;
    return {
        priceData: priceData,
        signature: data.signature,
        liteSignature: data.liteSignature,
    };
}
exports.convertResponseToPricePackage = convertResponseToPricePackage;
exports.default = {
    selectDataPackage: selectDataPackage,
    validateDataPackage: validateDataPackage,
    convertResponseToPricePackage: convertResponseToPricePackage,
};
//# sourceMappingURL=data-package-utils.js.map