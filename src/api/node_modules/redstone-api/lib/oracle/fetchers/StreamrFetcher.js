"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamrFetcher = void 0;
var streamr_client_1 = __importDefault(require("streamr-client"));
var lodash_1 = __importDefault(require("lodash"));
var Fetcher_1 = require("./Fetcher");
// This "private" key is used for streamr client initialization.
// It can be anythng, because redstone data streams are always
// public and can be accessed by any party.
// Previously we generated a random key each time, but turned
// out that it consumes significant amount of CPU resources
// and slows down web apps that use redstone-evm-connector
var ANY_PRIVATE_KEY = "0000000000000000000000000000000000000000000000000000000000000001";
var StreamrFetcher = /** @class */ (function (_super) {
    __extends(StreamrFetcher, _super);
    function StreamrFetcher(config, asset) {
        var _this = _super.call(this, config, asset) || this;
        _this.streamrClient = new streamr_client_1.default({
            auth: {
                privateKey: ANY_PRIVATE_KEY,
            },
        });
        return _this;
    }
    StreamrFetcher.prototype.getLatestData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var streamId, dataPackageResponse;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        streamId = this.getStreamId();
                        console.log("Using streamr stream: " + streamId);
                        return [4 /*yield*/, new Promise(function (resolve) {
                                // Subscribe to streamr
                                _this.streamrClient.subscribe(streamId, resolve);
                            })];
                    case 1:
                        dataPackageResponse = _a.sent();
                        // Unsubscribe right after first received value
                        return [4 /*yield*/, this.streamrClient.unsubscribe(streamId)];
                    case 2:
                        // Unsubscribe right after first received value
                        _a.sent();
                        // Convert response from streamr to SignedDataPackageResponse
                        return [2 /*return*/, this.extractPriceValue(dataPackageResponse)];
                }
            });
        });
    };
    StreamrFetcher.prototype.getStreamId = function () {
        return this.config.streamrEndpointPrefix + "/"
            + (this.asset ? "prices" : "package");
    };
    StreamrFetcher.prototype.extractPriceValue = function (receivedValue) {
        var _this = this;
        if (this.asset) {
            var assetsArray = Object.values(receivedValue);
            var assetData = assetsArray.find(function (_a) {
                var symbol = _a.symbol;
                return symbol === _this.asset;
            });
            if (!assetData) {
                throw new Error("Data not found for symbol: " + this.asset);
            }
            return {
                timestamp: assetData.timestamp,
                prices: [lodash_1.default.pick(assetData, ["symbol", "value"])],
                signature: assetData.evmSignature,
                liteSignature: assetData.liteEvmSignature,
            };
        }
        else {
            return {
                timestamp: receivedValue.pricePackage.timestamp,
                signature: receivedValue.signature,
                liteSignature: receivedValue.liteSignature,
                prices: receivedValue.pricePackage.prices,
            };
        }
    };
    return StreamrFetcher;
}(Fetcher_1.Fetcher));
exports.StreamrFetcher = StreamrFetcher;
//# sourceMappingURL=StreamrFetcher.js.map