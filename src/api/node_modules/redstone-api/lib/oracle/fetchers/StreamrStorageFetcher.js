"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamrStorageFetcher = void 0;
var StreamrFetcher_1 = require("./StreamrFetcher");
var StreamrStorageFetcher = /** @class */ (function (_super) {
    __extends(StreamrStorageFetcher, _super);
    function StreamrStorageFetcher(config, asset) {
        return _super.call(this, config, asset) || this;
    }
    // Overriding StreamrFetcher implementation
    // of init. As it's not required to subscribe to any stream
    // in the StreamrStorageFetcher
    StreamrStorageFetcher.prototype.init = function () { };
    StreamrStorageFetcher.prototype.getLatestData = function () {
        var _this = this;
        var streamId = this.getStreamId();
        return new Promise(function (resolve) {
            // Getting data from streamr storage
            _this.streamrClient.resend({
                stream: streamId,
                resend: {
                    last: 1,
                },
            }, function (value) {
                resolve(_this.extractPriceValue(value));
            });
        });
    };
    return StreamrStorageFetcher;
}(StreamrFetcher_1.StreamrFetcher));
exports.StreamrStorageFetcher = StreamrStorageFetcher;
//# sourceMappingURL=StreamrStorageFetcher.js.map